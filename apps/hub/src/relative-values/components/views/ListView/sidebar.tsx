import { FC, Fragment } from "react";

import { NumberShower, SquiggleChart } from "@quri/squiggle-components";
import { getPlaygroundUrl } from "@quri/versioned-squiggle-components";

import { SQUIGGLE_PLAYGROUND } from "@/lib/constants";
import { Item } from "@/relative-values/types";
import { ModelEvaluator } from "@/relative-values/values/ModelEvaluator";

interface TableRowProps {
  label: string;
  number: number;
}

const TableRow: React.FC<TableRowProps> = ({ label, number }) => (
  <Fragment key={label}>
    <div className="col-span-1 mt-1 py-1 text-left text-xs font-normal text-slate-400">
      {label}
    </div>
    <div className="col-span-2 py-1 pl-2 text-left text-slate-600">
      <NumberShower number={number} precision={2} />
    </div>
  </Fragment>
);

let buildSquiggleCode = (
  model: ModelEvaluator,
  numeratorItem: Item,
  denominatorItem: Item,
  variableName: string
) => {
  const toVarName = (id: string) => id.replace(/-/g, "_");
  const numeratorItemName = toVarName(numeratorItem.id);
  const denominatorItemName = toVarName(denominatorItem.id);
  return `${model.modelCode}
// ------- AUTOGENERATED CODE -------
dists = ${variableName}("${numeratorItem.id}", "${denominatorItem.id}")
value_${numeratorItemName} = Dist(dists[0])
value_${denominatorItemName} = Dist(dists[1])
valueRatio = value_${numeratorItemName} / value_${denominatorItemName}
medianDenominator = abs(median(value_${denominatorItemName}))
tickFormat = '10'
tickFormatObj = {tickFormat: tickFormat}

@name("Normalized Scatter Plot")
scatter = Plot.scatter(
  {
    xDist: SampleSet(dists[1] / medianDenominator),
    yDist: SampleSet(dists[0] / medianDenominator),
    xScale: Scale.symlog(
      { tickFormatObj, title: "${numeratorItem.name}" }
    ),
    yScale: Scale.symlog(
      { tickFormatObj, title: "${denominatorItem.name}" }
    ),
  }
)

@name("Debug")
debug = [
  scatter,
  Tag.name(
    [
      Tag.name(
        Plot.dist(dists[0], { xScale: Scale.symlog() }),
        "${numeratorItem.name}"
      ),
      Tag.name(
        Plot.dist(dists[1], { xScale: Scale.symlog() }),
        "${denominatorItem.name}"
      ),
    ],
    "Distributions"
  ),
]

@name("Ratio Distribution")
ratio = Plot.dist(
  {
    dist: valueRatio,
    xScale: Scale.symlog(tickFormatObj),
    yScale: Scale.symlog(tickFormatObj),
    showSummary: false,
  }
)

ratio
`;
};

type Props = {
  model: ModelEvaluator;
  numeratorItem: Item;
  denominatorItem: Item;
  variableName: string;
};

export const ItemSideBar: FC<Props> = ({
  model,
  numeratorItem,
  variableName,
  denominatorItem,
}) => {
  const result = model.compare(numeratorItem.id, denominatorItem.id);
  if (!result.ok) {
    return <div>Result not found</div>;
  } else {
    let item = result.value;
    const squggleCode = buildSquiggleCode(
      model,
      numeratorItem,
      denominatorItem,
      variableName
    );

    // It would be better to not load SquiggleChart, but rather, a lower-level compontent. That can be refactored later.
    return (
      <div>
        <div className="mb-6 mt-2 flex items-center overflow-x-auto p-1">
          <span className="mr-1 whitespace-nowrap text-slate-500">value</span>
          <span className="whitespace-nowrap text-xl text-slate-300">(</span>
          <span className="ml-2 mr-2 whitespace-pre-wrap rounded-sm bg-slate-200 bg-opacity-80 px-1 text-center text-sm font-semibold text-slate-900">
            {numeratorItem.name}
          </span>
          <span className="whitespace-nowrap px-1 text-xl text-slate-300">
            /
          </span>

          <span className="ml-2 mr-2 whitespace-pre-wrap rounded-sm bg-slate-200 px-1 text-center text-sm font-semibold text-slate-900">
            <span className="inline-block">{denominatorItem.name}</span>
          </span>
          <span className="whitespace-nowrap text-xl text-slate-300">)</span>
        </div>

        <div className="xs mb-4 text-slate-500">
          An estimate of the value of{" "}
          <span className="font-semibold text-slate-700">
            {numeratorItem.name}
          </span>{" "}
          in terms of{" "}
          <span className="font-semibold text-slate-700">
            {denominatorItem.name}
          </span>
        </div>

        <SquiggleChart code={squggleCode} />

        <div className="mb-10 mt-10 grid w-full grid-cols-6 gap-1">
          <TableRow label="median" number={item.median} />
          <TableRow label="mean" number={item.mean} />
          <TableRow label="p5" number={item.min} />
          <TableRow label="p95" number={item.max} />
          <TableRow label="uncertainty" number={item.uncertainty} />
        </div>

        <a
          href={getPlaygroundUrl({
            code: squggleCode,
            baseUrl: SQUIGGLE_PLAYGROUND,
          }).toString()}
          className="text-slate-400 underline"
        >
          Open in Playground
        </a>
      </div>
    );
  }
};
