// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearchPostgres"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model SquiggleCache {
  id       String  @id
  ok       Boolean
  error    String?
  result   Json?
  bindings Json?
}

// Auth.js models; https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id    String  @id @default(cuid())
  name  String?
  email String? @unique

  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  memberships    UserGroupMembership[]
  invites        GroupInvite[]
  modelRevisions ModelRevision[]

  // Usernames are stored through Owner table, because they share the same namespace with Groups.
  // Users don't initially have an Owner entry, but are prompted to pick a slug and create one.
  asOwner Owner?  @relation(fields: [ownerId], references: [id])
  ownerId String? @unique

  searchable Searchable?
  AiWorkflow AiWorkflow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships UserGroupMembership[]
  invites     GroupInvite[]

  asOwner Owner  @relation(fields: [ownerId], references: [id])
  ownerId String @unique

  reusableInviteToken String?

  searchable Searchable?
}

model Owner {
  id String @id @default(cuid())

  slug String @unique @db.Citext

  group Group?
  user  User?

  models                    Model[]
  relativeValuesDefinitions RelativeValuesDefinition[]
}

enum MembershipRole {
  Admin
  Member
}

model UserGroupMembership {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MembershipRole

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

enum GroupInviteStatus {
  Pending
  Accepted
  Declined
  Canceled
}

model GroupInvite {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Polymorphic, one and only one of `userId` and `email` must be set; type safety guaranteed by GraphQL code.
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  email String?

  role MembershipRole

  status      GroupInviteStatus @default(Pending)
  processedAt DateTime?

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@index([groupId])
  @@index([userId])
}

// Models are polymorphic.
// Polymorphism schema inspired by https://stackoverflow.com/a/73140073
enum ModelType {
  SquiggleSnippet
}

model Model {
  id String @id @default(cuid())

  slug String @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   Owner  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  isPrivate Boolean @default(false)

  revisions ModelRevision[] @relation("Revisions")

  // technically nullable, but won't ever be null in practice
  currentRevision   ModelRevision? @relation("CurrentRevision", fields: [currentRevisionId], references: [id])
  currentRevisionId String?        @unique

  searchable Searchable?
  variables  Variable[]

  @@unique([slug, ownerId])
  @@index([createdAt])
  @@index([ownerId])
}

model ModelRevision {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  model   Model  @relation("Revisions", fields: [modelId], references: [id], onDelete: Cascade)
  modelId String

  // optional until we populate old rows after migration
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
  comment  String  @default("")

  contentType ModelType

  squiggleSnippet SquiggleSnippet? @relation(fields: [contentId], references: [id], map: "squiggleSnippet_contentId")
  contentId       String?          @unique

  relativeValuesExports RelativeValuesExport[]
  variableRevisions     VariableRevision[]

  // required by Prisma, but unused since `model` field should point at the same entity
  currentRevisionModel Model?               @relation("CurrentRevision")
  builds               ModelRevisionBuild[]

  @@index([modelId])
}

model ModelRevisionBuild {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  modelRevision   ModelRevision @relation(fields: [modelRevisionId], references: [id], onDelete: Cascade)
  modelRevisionId String
  runSeconds      Float
  errors          String[]

  @@index([modelRevisionId])
}

model SquiggleSnippet {
  id String @id @default(cuid())

  code          String
  version       String
  seed          String
  autorunMode   Boolean?
  sampleCount   Int?
  xyPointLength Int?

  revision ModelRevision?
}

model Variable {
  id           String             @id @default(cuid())
  variableName String
  model        Model              @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId      String
  revisions    VariableRevision[] @relation("Revisions")

  // technically nullable, but won't ever be null in practice
  currentRevision   VariableRevision? @relation("CurrentRevision", fields: [currentRevisionId], references: [id])
  currentRevisionId String?           @unique

  @@unique([modelId, variableName])
}

model VariableRevision {
  id              String        @id @default(cuid())
  modelRevision   ModelRevision @relation(fields: [modelRevisionId], references: [id], onDelete: Cascade)
  modelRevisionId String
  variable        Variable      @relation("Revisions", fields: [variableId], references: [id], onDelete: Cascade)
  variableId      String
  variableName    String
  title           String?
  docstring       String        @default("")
  variableType    String        @default("OTHER")

  // required by Prisma, but unused since `model` field should point at the same entity
  currentRevisionVariable Variable? @relation("CurrentRevision")

  @@unique([modelRevisionId, variableName])
}

// Definitions are polymorphic, but organized differently from Models, without content types.
// Reasoning: https://github.com/quantified-uncertainty/squiggle/issues/1828#issuecomment-1563596166
model RelativeValuesDefinition {
  id String @id @default(cuid())

  slug String @db.Citext

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String

  // technically nullable, but won't ever be null in practice after the initial migration
  currentRevision   RelativeValuesDefinitionRevision? @relation("CurrentRevision", fields: [currentRevisionId], references: [id])
  currentRevisionId String?                           @unique

  revisions RelativeValuesDefinitionRevision[]

  modelExports RelativeValuesExport[]
  searchable   Searchable?

  @@unique([slug, ownerId])
  @@index([createdAt])
  @@index([ownerId])
}

model RelativeValuesDefinitionRevision {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  definition   RelativeValuesDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  definitionId String

  title String

  items           Json
  clusters        Json
  recommendedUnit String?

  // required by Prisma, but unused since `model` field should point at the same entity
  relativeValuesDefinition RelativeValuesDefinition? @relation("CurrentRevision")

  @@index([definitionId])
}

// Note that model revisions are associated with definitions (and not definition revisions).
// Associating model revisions with definition revisions would be better, but it's more complicated.
model RelativeValuesExport {
  id String @id @default(cuid())

  modelRevision   ModelRevision            @relation(fields: [modelRevisionId], references: [id], onDelete: Cascade)
  modelRevisionId String
  definition      RelativeValuesDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  definitionId    String

  variableName String

  cache RelativeValuesPairCache[]

  @@unique([modelRevisionId, definitionId, variableName], name: "uniqueKey")
  @@index([modelRevisionId]) // duplicates the @@unique above and probably not necessary, but doesn't hurt
  @@index([definitionId])
}

model RelativeValuesPairCache {
  id String @id @default(cuid())

  export   RelativeValuesExport @relation(fields: [exportId], references: [id], onDelete: Cascade)
  exportId String

  firstItem  String
  secondItem String

  error String?

  // { median, mean, min, max, uncertainty } object.
  // Maybe this should be split into postgres columns later.
  result Json?

  @@index([exportId])
}

model Searchable {
  id String @id @default(cuid())

  model   Model?  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId String? @unique

  definition   RelativeValuesDefinition? @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  definitionId String?                   @unique

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique

  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String? @unique
}

enum AiWorkflowFormat {
  V1_0 // ClientWorkflow JSON, legacy format - can't be deserialized back to Workflow
  V2_0 // SerializedWorkflow JSON, can be deserialized back to Workflow and resumed
}

model AiWorkflow {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // TODO - upgrade to V2_0
  format AiWorkflowFormat @default(V1_0)

  workflow Json

  // TODO - remove default
  markdown String @default("")
}
