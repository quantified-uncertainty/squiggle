// Auth.js models; https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id    String  @id @default(cuid())
    name  String?
    email String  @unique

    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    memberships    UserGroupMembership[]
    invites        GroupInvite[]
    modelRevisions ModelRevision[]

    // Usernames are stored through Owner table, because they share the same namespace with Groups.
    // Users don't initially have an Owner entry, but are prompted to pick a slug and create one.
    asOwner Owner?  @relation(fields: [ownerId], references: [id])
    ownerId String? @unique

    searchable Searchable?
    AiWorkflow AiWorkflow[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
